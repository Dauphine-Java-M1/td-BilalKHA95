---Exercice1---
1/ Celà fonctionne car même sans construcuter java utilise le constructeur implicite de la classe object. Et on as accès au variable private car le main et dans la classe Point.

2/C'est impossible car les arguments private ne sont pas accessible depuis l'extérieur de la classe. On peut remédier à ce problème en implémentant des getter.

3/Afin de modifier les propriétés(attributs) qu'à l'intérieur de la classe à travers les méthodes de la classe (protected ou public).

4/Un accesseur permet d'avoir accès aux attributs private de la classe (getter) , ou les modifier ou initialiser(si pas fait dans le constructeur) dans ce cas c'est un setter.

Ici oui on doit implementer un getter 

5/Le constructeur sans argument n'est plus défini 

6/Le constructeur ne fait plus la différence entre les arguments du constructeur et les attributs de la classe 

7/On peut utiliser un compteur static qui ne dépendra pas d'une instance mais sera partagée par toutes les instances qu'on incrementra à chaque appel à un constructeur de point  

8/En regardant le type des paramètres du constructeur 

9/On peut redéfinir la méthode toString() héritée de la classe Object.

---Exercice2---

1/ Afficher true et false car l'opérateur == compare les refendes des objets(adresse) et non pas les attributs 

3/Le problème est qu'il trouve l'objet P2 car il a la meme reference que l'objet P1 mais pas P3 car maigre qu'il est les meme coordonnées il ont des références différentes 
indexOf utilise la méthode equals il faut donc redéfinir la méthode equals pour comparer non pas aux niveau des references mais au niveau des attributs.

---Exercice3---

2/Le point ne sera pas ajoutée car toutes les cases de notre tableau seront occupé . Pour éviter de parcourir à chaque fois notre tableau pour vérifier qu'il reste un element disponible dans notre tableau on peut ajouter un attribut à notre ligne qui représente l'index de notre dernier element

5/On ajoute un element null à notre tableau , en ajoutant Objects.requirenonnull une exception est levée si on ajoute un element null. 

6/pointCapacity n'est plus nécessaire car il n'y a pas de taille maximum pour une linkedList si ce n'est la mémoire du système. NbPoint et contains sont toujours utile par contre l'implementation de ces méthode existe deja dans linkedList on fait juste donc juste appel à leur implementation dans ces méthodes. 

---Exercice4---

1/On peut modifier le point lui meme ce qui le rend mutable dans ce cas la signature ne renverra rien void mais si on ne souhaite pas modifier le point on peut retourner un nouveau Point avec les nouveaux coordonnées en prenant en compte la translation 

5/


